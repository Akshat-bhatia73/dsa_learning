<!DOCTYPE html>
<html lang="en" class="dark-theme"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>6. Own data structures â€“ 
      Data Structures and Algorithms
    </title>
    <link rel="stylesheet" href="6.%20Own%20data%20structures%20%E2%80%93%20Data%20Structures%20and%20Algorithms_files/fonts.css">
    <link rel="stylesheet" href="6.%20Own%20data%20structures%20%E2%80%93%20Data%20Structures%20and%20Algorithms_files/style.css">
    <script>
      let activeTheme = localStorage.getItem("theme");
      if (activeTheme === null) {
        activeTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
      }
      document.documentElement.classList.toggle(
        "dark-theme",
        activeTheme === "dark"
      );
      const hideOtherSectionMenus = 1;
    </script>
    <script src="6.%20Own%20data%20structures%20%E2%80%93%20Data%20Structures%20and%20Algorithms_files/navigation.js"></script>

    <link rel="stylesheet" href="6.%20Own%20data%20structures%20%E2%80%93%20Data%20Structures%20and%20Algorithms_files/katex.min.css" integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0" crossorigin="anonymous">
    <script defer="defer" src="6.%20Own%20data%20structures%20%E2%80%93%20Data%20Structures%20and%20Algorithms_files/katex.min.js" integrity="sha384-PwRUT/YqbnEjkZO0zZxNqcxACrXe+j766U2amXcgMg5457rve2Y7I6ZJSm2A0mS4" crossorigin="anonymous"></script>
    <script defer="defer" src="6.%20Own%20data%20structures%20%E2%80%93%20Data%20Structures%20and%20Algorithms_files/auto-render.min.js" integrity="sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05" crossorigin="anonymous" onload="renderMathInElement(document.body, { delimiter: [{left:'\\(',right:'\\)',display:false},{left:'\\[',right:'\\]',display:true}] });"></script>
  </head>
  <body class="">
    <div class="menu-background" id="menu-background"></div>
    <button class="menu" id="menu" aria-expanded="false" aria-controls="side" aria-label="Menu">
      <svg viewBox="0 0 5 5" width="25" height="25">
        <rect width="5" height="1"></rect>
        <rect width="5" height="1" y="2"></rect>
        <rect width="5" height="1" y="4"></rect>
      </svg>
    </button>
    <div class="side" id="side">
      <header>
        <button class="theme" id="theme" title="Switch theme">
          <svg viewBox="0 0 10 10" width="25" height="25">
            <circle cx="5" cy="5" r="2.4"></circle>
            <circle cx="5" cy="1" r="0.8"></circle>
            <circle cx="9" cy="5" r="0.8"></circle>
            <circle cx="5" cy="9" r="0.8"></circle>
            <circle cx="1" cy="5" r="0.8"></circle>
            <circle cx="2.17" cy="2.17" r="0.8"></circle>
            <circle cx="7.83" cy="2.17" r="0.8"></circle>
            <circle cx="2.17" cy="7.83" r="0.8"></circle>
            <circle cx="7.83" cy="7.83" r="0.8"></circle>
          </svg>
        </button>
        <a class="header" href="https://tira.mooc.fi/spring-2025/">
          <h1>Data Structures and Algorithms</h1><h2>spring 2025</h2></a>
      </header>
      <nav>
        
        <ul>
          
          
            <li data-url="/">
  <a href="https://tira.mooc.fi/spring-2025/">Course description</a>
  
  
</li>
          
            <li data-url="/exercises">
  <a href="https://tira.mooc.fi/spring-2025/exercises">Exercises and lecture videos</a>
  
  
</li>
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
        </ul>
        
        
          
          
          <ul>
            
              <li data-url="/chap01/">
  <a href="https://tira.mooc.fi/spring-2025/chap01/">1. Introduction</a>
  
  
</li>
            
              <li data-url="/chap02/">
  <a href="https://tira.mooc.fi/spring-2025/chap02/">2. List</a>
  
  
</li>
            
              <li data-url="/chap03/">
  <a href="https://tira.mooc.fi/spring-2025/chap03/">3. Efficient algorithms</a>
  
  
</li>
            
              <li data-url="/chap04/">
  <a href="https://tira.mooc.fi/spring-2025/chap04/">4. Hashing</a>
  
  
</li>
            
              <li data-url="/chap05/">
  <a href="https://tira.mooc.fi/spring-2025/chap05/">5. Sorting</a>
  
  
</li>
            
              <li data-url="/chap06/">
  <a href="https://tira.mooc.fi/spring-2025/chap06/" class="current">6. Own data structures</a>
  
  
    <ul>
      
        
          <li>
            <a href="https://tira.mooc.fi/spring-2025/chap06/#example-stack" data-anchor="example-stack">Example: Stack</a>
          </li>
        
      
        
          <li>
            <a href="https://tira.mooc.fi/spring-2025/chap06/#how-not-to-implement-a-class" data-anchor="how-not-to-implement-a-class">How not to implement a class</a>
          </li>
        
      
        
          <li>
            <a href="https://tira.mooc.fi/spring-2025/chap06/#additional-class-features" data-anchor="additional-class-features">Additional class features</a>
          </li>
        
      
        
          <li>
            <a href="https://tira.mooc.fi/spring-2025/chap06/#example-efficient-duplicates" data-anchor="example-efficient-duplicates">Example: Efficient duplicates</a>
          </li>
        
      
        
          <li>
            <a href="https://tira.mooc.fi/spring-2025/chap06/#example-mode" data-anchor="example-mode">Example: Mode</a>
          </li>
        
      
    </ul>
  
</li>
            
              <li data-url="/chap07/">
  <a href="https://tira.mooc.fi/spring-2025/chap07/">7. Trees and recursion</a>
  
  
</li>
            
              <li data-url="/chap08/">
  <a href="https://tira.mooc.fi/spring-2025/chap08/">8. Graph algorithms</a>
  
  
</li>
            
          </ul>
          
          
        
          
          
          <ul>
            
              <li data-url="/chap09/">
  <a href="https://tira.mooc.fi/spring-2025/chap09/">9. Search problems</a>
  
  
</li>
            
              <li data-url="/chap10/">
  <a href="https://tira.mooc.fi/spring-2025/chap10/">10. Dynamic programming</a>
  
  
</li>
            
              <li data-url="/chap11/">
  <a href="https://tira.mooc.fi/spring-2025/chap11/">11. More data structures</a>
  
  
</li>
            
              <li data-url="/chap12/">
  <a href="https://tira.mooc.fi/spring-2025/chap12/">12. Binary search tree</a>
  
  
</li>
            
              <li data-url="/chap13/">
  <a href="https://tira.mooc.fi/spring-2025/chap13/">13. Directed graphs</a>
  
  
</li>
            
              <li data-url="/chap14/">
  <a href="https://tira.mooc.fi/spring-2025/chap14/">14. Shortest paths</a>
  
  
</li>
            
              <li data-url="/chap15/">
  <a href="https://tira.mooc.fi/spring-2025/chap15/">15. Components and spanning trees</a>
  
  
</li>
            
              <li data-url="/chap16/">
  <a href="https://tira.mooc.fi/spring-2025/chap16/">16. Maximum flow</a>
  
  
</li>
            
          </ul>
          
          
        
          
        
      </nav>
    </div>
    <main>
      <div class="awning" id="awning" aria-hidden="true">6. Own data structures</div>
      <article data-url="/chap06/">
  <h1 id="6-own-data-structures">6. Own data structures</h1>

<p>The functionality of a data structure can be represented as a 
collection of methods, each with given parameters and a given result 
from calling it. For example, the Python list has the methods <code class="language-plaintext highlighter-rouge">append</code>, <code class="language-plaintext highlighter-rouge">count</code> and <code class="language-plaintext highlighter-rouge">index</code> that add an element to the list, count the number of occurrences of an element and search for the index of an element.</p>

<p>By defining a class we can create a customized data structure that 
has its own set of methods. Often such a data structure contains some 
standard Python data structure such as a list or a dictionary as 
internal data storage. The advantage of a class is that it offers a 
clean interface that hides the details of the internal implementation.</p>

<h2 id="example-stack">Example: Stack</h2>

<p class="note-title">Task</p>
<div class="note">

  <p>Implement a class <code class="language-plaintext highlighter-rouge">Stack</code> that implements the stack data structure. The class should have the following methods:</p>

  <ul>
    <li><code class="language-plaintext highlighter-rouge">push(x)</code>: add the element <code class="language-plaintext highlighter-rouge">x</code> to the top of the stack</li>
    <li><code class="language-plaintext highlighter-rouge">top()</code>: access the element at the top of the stack</li>
    <li><code class="language-plaintext highlighter-rouge">pop()</code>: remove the element at the top of the stack</li>
  </ul>

  <p>The time complexity of each method should be <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span style="margin-right: 0.0278em;" class="mord mathnormal">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>.</p>

</div>

<p>The class <code class="language-plaintext highlighter-rouge">Stack</code> is easy to implement using the Python list, which supports additions and removals at the end of the list in <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span style="margin-right: 0.0278em;" class="mord mathnormal">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span> time. We can implement the class as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Stack</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">top</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
</code></pre></div></div>

<p>The idea is that the class defines an internal list <code class="language-plaintext highlighter-rouge">stack</code> that stores the elements of the stack. The methods <code class="language-plaintext highlighter-rouge">push</code> and <code class="language-plaintext highlighter-rouge">pop</code> are implemented using the list methods <code class="language-plaintext highlighter-rouge">append</code> and <code class="language-plaintext highlighter-rouge">pop</code>, and the method <code class="language-plaintext highlighter-rouge">top</code> is implemented by accessing the last element of the list.</p>

<p>The following code tests the functionality of the class:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="n">Stack</span><span class="p">()</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">top</span><span class="p">())</span> <span class="c1"># 3
</span><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">top</span><span class="p">())</span> <span class="c1"># 3
</span><span class="n">s</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">top</span><span class="p">())</span> <span class="c1"># 2
</span></code></pre></div></div>

<p>Using the class <code class="language-plaintext highlighter-rouge">Stack</code>
 instead of using the list directly restricts the functionality to the 
stack methods. For example, access is allowed only to the last element 
of the list. The user of the class does not need to know the internal 
implementation, but can trust that the methods <code class="language-plaintext highlighter-rouge">push</code>, <code class="language-plaintext highlighter-rouge">top</code> and <code class="language-plaintext highlighter-rouge">pop</code> are available.</p>

<p>Notice that we can access the internal data too if we know how the 
class is implemented. This is illustrated by the following code:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="n">Stack</span><span class="p">()</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">stack</span><span class="p">)</span> <span class="c1"># [1, 2, 3]
</span></code></pre></div></div>

<p>Here the <code class="language-plaintext highlighter-rouge">print</code>
 command accesses all elements of the internal list, even though only 
the last element is accessible through the methods of the class <code class="language-plaintext highlighter-rouge">Stack</code>.</p>

<h2 id="how-not-to-implement-a-class">How not to implement a class</h2>

<p>The following way of implementing a class does not work:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Stack</span><span class="p">:</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">top</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
</code></pre></div></div>

<p>The difference to the earlier class is that now there is no constructor (method <code class="language-plaintext highlighter-rouge">__init__</code>) and the list <code class="language-plaintext highlighter-rouge">stack</code> is created at the main level of the class. This can appear to work at first try:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="n">Stack</span><span class="p">()</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">top</span><span class="p">())</span> <span class="c1"># 3
</span></code></pre></div></div>

<p>The trouble is that the list <code class="language-plaintext highlighter-rouge">stack</code> is <em>shared</em> by all objects created from the class. This is illustrated in the following code:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">Stack</span><span class="p">()</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">Stack</span><span class="p">()</span>
<span class="n">a</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">b</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">top</span><span class="p">())</span> <span class="c1"># 2
</span></code></pre></div></div>

<p>The code adds the number <code class="language-plaintext highlighter-rouge">1</code> to the stack <code class="language-plaintext highlighter-rouge">a</code> and the number <code class="language-plaintext highlighter-rouge">2</code> to the stack <code class="language-plaintext highlighter-rouge">b</code>. Then the code accesses the top element of the stack <code class="language-plaintext highlighter-rouge">a</code>. The result should be <code class="language-plaintext highlighter-rouge">1</code> but here it is <code class="language-plaintext highlighter-rouge">2</code> because of the shared list <code class="language-plaintext highlighter-rouge">stack</code>. Adding an element to one stack adds it to both stacks, which is not how the class should function.</p>

<h2 id="additional-class-features">Additional class features</h2>

<p>The earlier class <code class="language-plaintext highlighter-rouge">Stack</code> is correct but is still missing some useful features. First, the printout of a stack is not very informative:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="n">Stack</span><span class="p">()</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="c1"># &lt;__main__.Stack object at 0x7fd6c4e23ee0&gt;
</span></code></pre></div></div>

<p>We can address this by adding a method <code class="language-plaintext highlighter-rouge">__repr__</code> that produces a description of the contents of the stack as a string. In this case, the method can turn the list <code class="language-plaintext highlighter-rouge">stack</code> into a string and return that:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">)</span>
</code></pre></div></div>

<p>After this change, we can print out the contents of a stack:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="n">Stack</span><span class="p">()</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="c1"># [1, 2, 3]
</span></code></pre></div></div>

<p>Another feature missing is that we cannot determine the size of the stack with the function <code class="language-plaintext highlighter-rouge">len</code>. Trying to do that would cause an error. We can fix this by defining the method <code class="language-plaintext highlighter-rouge">__len__</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">)</span>
</code></pre></div></div>

<p>The method <code class="language-plaintext highlighter-rouge">__len__</code> is called when an object of the class is given as parameter to the function <code class="language-plaintext highlighter-rouge">len</code>. With our class, the method can return the length of the internal list <code class="language-plaintext highlighter-rouge">stack</code>. Now the following code works as expected:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="n">Stack</span><span class="p">()</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="c1"># 3
</span></code></pre></div></div>

<p>There is still a potential problem with the methods <code class="language-plaintext highlighter-rouge">pop</code> and <code class="language-plaintext highlighter-rouge">top</code>.
 What happens if the list is empty when they are called? In such a 
situation, there is no element to remove or access. We can add error 
handling to the methods to cover such situations as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">IndexError</span><span class="p">(</span><span class="s">"pop from empty stack"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">top</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">IndexError</span><span class="p">(</span><span class="s">"top from empty stack"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<p>Now, if the methods are called when the stack is empty, they produce the error <code class="language-plaintext highlighter-rouge">IndexError</code> with a text describing the cause of the error. This is illustrated by the following code:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="n">Stack</span><span class="p">()</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
<span class="n">s</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span> <span class="c1"># IndexError: pop from empty stack
</span></code></pre></div></div>

<h2 id="example-efficient-duplicates">Example: Efficient duplicates</h2>

<p class="note-title">Task</p>
<div class="note">

  <p>Implement a class <code class="language-plaintext highlighter-rouge">SuperStack</code> with the following methods:</p>

  <ul>
    <li><code class="language-plaintext highlighter-rouge">push(x)</code>: add the element <code class="language-plaintext highlighter-rouge">x</code> to the top of the stack</li>
    <li><code class="language-plaintext highlighter-rouge">push_many(k, x)</code>: add <code class="language-plaintext highlighter-rouge">k</code> copies of the element <code class="language-plaintext highlighter-rouge">x</code> to the top of the stack</li>
    <li><code class="language-plaintext highlighter-rouge">top()</code>: access the element at the top of the stack</li>
    <li><code class="language-plaintext highlighter-rouge">pop()</code>: remove the element at the top of the stack</li>
  </ul>

  <p>The time complexity of each method should be <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span style="margin-right: 0.0278em;" class="mord mathnormal">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>.</p>

</div>

<p>This class <code class="language-plaintext highlighter-rouge">SuperStack</code> is the same as the earlier class <code class="language-plaintext highlighter-rouge">Stack</code> but with the addition of the method <code class="language-plaintext highlighter-rouge">push_many</code>,
 which adds multiple copies of the same element to the stack. 
Implementing the new method is a challenge, because it should run in <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span style="margin-right: 0.0278em;" class="mord mathnormal">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span> time independent of how many copies of the element is added.</p>

<p>The following straightforward implementation is not efficient enough:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">push_many</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span><span class="p">):</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<p>Here the loop needs <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span style="margin-right: 0.0278em;" class="mord mathnormal">O</span><span class="mopen">(</span><span style="margin-right: 0.0315em;" class="mord mathnormal">k</span><span class="mclose">)</span></span></span></span></span> time and its running time depends on the number of copies added. To achieve the time complexity <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span style="margin-right: 0.0278em;" class="mord mathnormal">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>, the method should have no loop.</p>

<p>A useful approach to class design is to separate what is required and
 how it is achieved. Here the class is required to have the four methods
 with time complexity <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span style="margin-right: 0.0278em;" class="mord mathnormal">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>,
 but we are free to choose the internal implementation. Specifically, 
there is no requirement to store each element separately in a stack as 
long as the methods work <em>as if</em> there was such a stack.</p>

<p>An efficient way to implement the class is to store a stack of pairs of the form <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(k,x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">(</span><span style="margin-right: 0.0315em;" class="mord mathnormal">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></span>, which represents <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span style="margin-right: 0.0315em;" class="mord mathnormal">k</span></span></span></span></span> copies of the element <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span>. For example, the code</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="n">SuperStack</span><span class="p">()</span>
<span class="n">s</span><span class="p">.</span><span class="n">push_many</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">push_many</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<p>creates the stack <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mn>3</mn><mo separator="true">,</mo><mn>8</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[(3,8),(1,4),(2,5)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">[(</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">8</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">5</span><span class="mclose">)]</span></span></span></span></span> as a compact representation of the stack <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>8</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[8,8,8,4,5,5]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">[</span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">5</span><span class="mclose">]</span></span></span></span></span>. Now each call to the methods <code class="language-plaintext highlighter-rouge">push</code> or <code class="language-plaintext highlighter-rouge">push_many</code> adds just one element to the compact stack. The methods <code class="language-plaintext highlighter-rouge">top</code> and <code class="language-plaintext highlighter-rouge">pop</code> have to be modified to correctly process the pairs in the stack. The class can be implemented as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SuperStack</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
        
    <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
        
    <span class="k">def</span> <span class="nf">push_many</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">k</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
        
    <span class="k">def</span> <span class="nf">top</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
        
    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">last</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">last</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="k">else</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">last</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">last</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<p>The method <code class="language-plaintext highlighter-rouge">top</code> returns the second element of the top pair, since that is the actual element in the stack. The method <code class="language-plaintext highlighter-rouge">pop</code>
 looks at the first element, the repeat count, of the top pair. If the 
repeat count is one, the whole pair is removed. Otherwise, the repeat 
count is reduced by one.</p>

<p>With this implementation, each method of the class runs in <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span style="margin-right: 0.0278em;" class="mord mathnormal">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span> time, since now there are no loops.</p>

<h2 id="example-mode">Example: Mode</h2>

<p class="note-title">Task</p>
<div class="note">

  <p>Implement a class <code class="language-plaintext highlighter-rouge">Mode</code> with the following methods:</p>

  <ul>
    <li><code class="language-plaintext highlighter-rouge">add(x)</code>: add the number <code class="language-plaintext highlighter-rouge">x</code> on the list</li>
    <li><code class="language-plaintext highlighter-rouge">mode()</code>: return the mode of the list, i.e., the most frequent number on the list</li>
  </ul>

  <p>The time complexity of each method should be <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span style="margin-right: 0.0278em;" class="mord mathnormal">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>.</p>

</div>

<p>This is similar to the task of computing the mode of a given list 
that we saw in an earlier chapter. The difference is that now we can 
alternate additions to the list with queries for the mode among the 
current list contents. For example, the class could be used as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m</span> <span class="o">=</span> <span class="n">Mode</span><span class="p">()</span>
<span class="n">m</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">m</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">m</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">mode</span><span class="p">())</span> <span class="c1"># 1
</span><span class="n">m</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">m</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">mode</span><span class="p">())</span> <span class="c1"># 2
</span></code></pre></div></div>

<p>Since the mode query is the only query that the class needs to 
answer, we do not need to keep the full list but just enough information
 to be able to compute the mode. We can use a dictionary to store the 
occurrence count of each number. In addition, the class keeps track of 
the current mode.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Mode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">count</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">x</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">count</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">count</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">count</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">status</span><span class="p">,</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">count</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">x</span><span class="p">))</span>
        
    <span class="k">def</span> <span class="nf">mode</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">status</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<p>The dictionary <code class="language-plaintext highlighter-rouge">count</code> contains the occurrence counts of the elements, and the pair <code class="language-plaintext highlighter-rouge">status</code> stores the current mode in the form <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(k,x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">(</span><span style="margin-right: 0.0315em;" class="mord mathnormal">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></span>: the mode is <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span> and it occurs <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span style="margin-right: 0.0315em;" class="mord mathnormal">k</span></span></span></span></span> times on the list. When an element <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span> is added to the list, the mode is updated if <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span> is the mode after the addition. A succinct way to do this is to use the function <code class="language-plaintext highlighter-rouge">max</code>, which uses the first element of the pair (the count) as the primary key in the comparison.</p>

<p>Since neither method of the class has loops or slow operations, their time complexity is <span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span style="margin-right: 0.0278em;" class="mord mathnormal">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span> as required.</p>

</article>

      <footer>
        <img id="hy-logo" src="6.%20Own%20data%20structures%20%E2%80%93%20Data%20Structures%20and%20Algorithms_files/hy_logo.svg">
        <style>
          .dark-theme #hy-logo {
            content: url("/spring-2025/assets/img/hy_logo_neg.svg");
          }
        </style>
      </footer>
    </main>
  

</body></html>